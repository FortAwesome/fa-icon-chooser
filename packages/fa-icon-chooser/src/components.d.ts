/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconChooserResult, IconDefinition, IconUpload, UrlTextFetcher } from "./utils/utils";
import { QueryHandler } from "./components/fa-icon-chooser/fa-icon-chooser";
export { IconChooserResult, IconDefinition, IconUpload, UrlTextFetcher } from "./utils/utils";
export { QueryHandler } from "./components/fa-icon-chooser/fa-icon-chooser";
export namespace Components {
    /**
     * This fa-icon component isn't THE fa-icon component. It's just a convenience
     * component to help with displaying icons within the Icon Chooser.
     */
    interface FaIcon {
        "class": string;
        "emitIconDefinition"?: (iconDefinition: IconDefinition) => void;
        "familyStylePathSegment": string;
        "getUrlText"?: UrlTextFetcher;
        "icon"?: IconDefinition;
        "iconUpload"?: IconUpload;
        "kitToken"?: string;
        "name"?: string;
        "pro": boolean;
        "size"?: string;
        "stylePrefix"?: string;
        "svgApi": any;
        "svgFetchBaseUrl"?: string;
    }
    interface FaIconChooser {
        /**
          * Callback function that returns the text body of a response that corresponds to an HTTP GET request for the given URL. For example, it would be the result of [Response.text()](https://developer.mozilla.org/en-US/docs/Web/API/Response/text).
         */
        "getUrlText": UrlTextFetcher;
        /**
          * Required callback function which is responsible for taking a given GraphQL query document and returns a Promise that resolves to a JavaScript object corresponding to the body of the associated network request, same as what would be produced by [Response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Response/json).  The query document is compliant with the GraphQL API at [api.fontawesome.com](https://fontawesome.com/v5.15/how-to-use/graphql-api/intro/getting-started).  The implementation is responsible for handling any authorization that may be necessary to fulfill the request. For example, any time a kit is used to drive the Icon Chooser, it will be necessary to authorize GraphQL API requests sent to api.fontawesome.com with the [`kits_read` scope](https://fontawesome.com/v5.15/how-to-use/graphql-api/auth/scopes).
         */
        "handleQuery": QueryHandler;
        /**
          * A kit token identifying a kit in which to find icons. Takes precedent over version prop if both are present.
         */
        "kitToken"?: string;
        /**
          * Placeholder text for search form.  Use this to provide translatable text.
         */
        "searchInputPlaceholder"?: string;
        /**
          * Version to use for finding and loading icons when kitToken is not provided. Must be a valid semantic version, as parsed by the [semver NPM](https://www.npmjs.com/package/semver), like 5.5.13 or 6.0.0-beta1.
         */
        "version"?: string;
    }
}
export interface FaIconChooserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFaIconChooserElement;
}
declare global {
    /**
     * This fa-icon component isn't THE fa-icon component. It's just a convenience
     * component to help with displaying icons within the Icon Chooser.
     */
    interface HTMLFaIconElement extends Components.FaIcon, HTMLStencilElement {
    }
    var HTMLFaIconElement: {
        prototype: HTMLFaIconElement;
        new (): HTMLFaIconElement;
    };
    interface HTMLFaIconChooserElementEventMap {
        "finish": IconChooserResult;
    }
    interface HTMLFaIconChooserElement extends Components.FaIconChooser, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFaIconChooserElementEventMap>(type: K, listener: (this: HTMLFaIconChooserElement, ev: FaIconChooserCustomEvent<HTMLFaIconChooserElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFaIconChooserElementEventMap>(type: K, listener: (this: HTMLFaIconChooserElement, ev: FaIconChooserCustomEvent<HTMLFaIconChooserElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFaIconChooserElement: {
        prototype: HTMLFaIconChooserElement;
        new (): HTMLFaIconChooserElement;
    };
    interface HTMLElementTagNameMap {
        "fa-icon": HTMLFaIconElement;
        "fa-icon-chooser": HTMLFaIconChooserElement;
    }
}
declare namespace LocalJSX {
    /**
     * This fa-icon component isn't THE fa-icon component. It's just a convenience
     * component to help with displaying icons within the Icon Chooser.
     */
    interface FaIcon {
        "class"?: string;
        "emitIconDefinition"?: (iconDefinition: IconDefinition) => void;
        "familyStylePathSegment"?: string;
        "getUrlText"?: UrlTextFetcher;
        "icon"?: IconDefinition;
        "iconUpload"?: IconUpload;
        "kitToken"?: string;
        "name"?: string;
        "pro"?: boolean;
        "size"?: string;
        "stylePrefix"?: string;
        "svgApi"?: any;
        "svgFetchBaseUrl"?: string;
    }
    interface FaIconChooser {
        /**
          * Callback function that returns the text body of a response that corresponds to an HTTP GET request for the given URL. For example, it would be the result of [Response.text()](https://developer.mozilla.org/en-US/docs/Web/API/Response/text).
         */
        "getUrlText"?: UrlTextFetcher;
        /**
          * Required callback function which is responsible for taking a given GraphQL query document and returns a Promise that resolves to a JavaScript object corresponding to the body of the associated network request, same as what would be produced by [Response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Response/json).  The query document is compliant with the GraphQL API at [api.fontawesome.com](https://fontawesome.com/v5.15/how-to-use/graphql-api/intro/getting-started).  The implementation is responsible for handling any authorization that may be necessary to fulfill the request. For example, any time a kit is used to drive the Icon Chooser, it will be necessary to authorize GraphQL API requests sent to api.fontawesome.com with the [`kits_read` scope](https://fontawesome.com/v5.15/how-to-use/graphql-api/auth/scopes).
         */
        "handleQuery"?: QueryHandler;
        /**
          * A kit token identifying a kit in which to find icons. Takes precedent over version prop if both are present.
         */
        "kitToken"?: string;
        /**
          * Clients of the Icon Chooser should listen for this event in order to handle the result of the user's interaction.  The emitted `IconChooserResult` will not include SVG data (as an `IconDefinition`) when prohibited by the client's license.  License terms for SVG icon data emitted are governed by the terms on the Font Awesome [plans page](https://fontawesome.com/plans), which are elaborated on the Font Awesome [support page](https://fontawesome.com/support).
         */
        "onFinish"?: (event: FaIconChooserCustomEvent<IconChooserResult>) => void;
        /**
          * Placeholder text for search form.  Use this to provide translatable text.
         */
        "searchInputPlaceholder"?: string;
        /**
          * Version to use for finding and loading icons when kitToken is not provided. Must be a valid semantic version, as parsed by the [semver NPM](https://www.npmjs.com/package/semver), like 5.5.13 or 6.0.0-beta1.
         */
        "version"?: string;
    }
    interface IntrinsicElements {
        "fa-icon": FaIcon;
        "fa-icon-chooser": FaIconChooser;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * This fa-icon component isn't THE fa-icon component. It's just a convenience
             * component to help with displaying icons within the Icon Chooser.
             */
            "fa-icon": LocalJSX.FaIcon & JSXBase.HTMLAttributes<HTMLFaIconElement>;
            "fa-icon-chooser": LocalJSX.FaIconChooser & JSXBase.HTMLAttributes<HTMLFaIconChooserElement>;
        }
    }
}
